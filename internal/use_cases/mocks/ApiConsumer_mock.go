// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// MockApiConsumer is an autogenerated mock type for the ApiConsumer type
type MockApiConsumer struct {
	mock.Mock
}

type MockApiConsumer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockApiConsumer) EXPECT() *MockApiConsumer_Expecter {
	return &MockApiConsumer_Expecter{mock: &_m.Mock}
}

// DoRequest provides a mock function with given fields: request, results
func (_m *MockApiConsumer) DoRequest(request *http.Request, results any) error {
	ret := _m.Called(request, results)

	if len(ret) == 0 {
		panic("no return value specified for DoRequest")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*http.Request, any) error); ok {
		r0 = rf(request, results)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockApiConsumer_DoRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DoRequest'
type MockApiConsumer_DoRequest_Call struct {
	*mock.Call
}

// DoRequest is a helper method to define mock.On call
//   - request *http.Request
//   - results any
func (_e *MockApiConsumer_Expecter) DoRequest(request interface{}, results interface{}) *MockApiConsumer_DoRequest_Call {
	return &MockApiConsumer_DoRequest_Call{Call: _e.mock.On("DoRequest", request, results)}
}

func (_c *MockApiConsumer_DoRequest_Call) Run(run func(request *http.Request, results any)) *MockApiConsumer_DoRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Request), args[1].(any))
	})
	return _c
}

func (_c *MockApiConsumer_DoRequest_Call) Return(_a0 error) *MockApiConsumer_DoRequest_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockApiConsumer_DoRequest_Call) RunAndReturn(run func(*http.Request, any) error) *MockApiConsumer_DoRequest_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockApiConsumer creates a new instance of MockApiConsumer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockApiConsumer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockApiConsumer {
	mock := &MockApiConsumer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
